
Introduction
------------

mod_auth_dce is an Apache module for DCE based authentication. It allows
you to use the DCE security registry to authenticate remote browsers. You
can control access to files either via standard web server configuration
directives, or via DFS ACLs.

With mod_auth_dce, you can supply DCE users and DCE groups to the Apache
require directive, and restrict access to files or resources so only the
listed users or groups can access them. In this mode, mod_auth_dce will
request authentication from the browser on every request.

When used with DFS, mod_auth_dce can also use DFS ACLs for
authorization. In this mode, mod_auth_dce will check the DFS ACL for each
request. If the file requested is readable by the server, it will be served
with no authentication required. If the file is not readable by the server,
mod_auth_dce will request authentication from the browser and use it to
obtain DCE credentials for the browsing user. The request will be
reprocessed using the DCE identity of the browser, and if the file
requested is readable by that user, it will be served. Otherwise, the
request will be forbidden.

mod_auth_dce is most useful when combined with DFS. Once mod_auth_dce has
been installed, access to files can be controlled simply by setting DFS
ACLs, with no further web server configuration required. However, support
of standard web server configuration directives allows mod_auth_dce to be
useful at sites without DFS, and also for protecting resources that are not
files, such as Apache handlers.

Other features of mod_auth_dce include login context caching, and DCE
authenticated CGI execution.

mod_auth_dce currently uses standard Basic authentication to get the
username and password. With stock Apache, this means the password is
transmitted in cleartext. However, if Apache-SSL is used, the password can
be encrypted. A future release might support Kerberos authentication to
avoid the cleartext password problem.


Installation
------------

To operate correctly, mod_auth_dce needs some minor patches to the Apache
source code. Please see the file README.PATCHES and apply the appropriate
patch before continuing.

Some implementations of DCE have bugs that prevent mod_auth_dce from
securely caching login contexts or that don't allow mod_auth_dce to
give up DCE credentials. Please see the file README.BUGS for details of
currently known problems. Also, you should compile and run the test
program before continuing to verify your implementation does not have
one of these bugs. Change to the test subdirectory and edit the Makefile,
uncommenting the appropriate libraries or defining your own. You also
need to supply a valid DCE username/password, and the location of a file
in DFS accessible only to that user. Please see the Makefile for details.
Once the Makefile has been edited, just type make, and the test program
will verify that there are no bugs in the DCE calls mod_auth_dce makes.

By default, mod_auth_dce has login context caching turned on. The caching
should increase performance, but more importantly, will significantly
decrease the load on your security server. However, if the README.BUGS
file or the test program indicates your implementation can not utilize
caching securely, you should edit the mod_auth_dce.c file and follow
the instructions in it to disable caching.

You should also edit the mod_auth_dce.c file if you want to change any
of the cache options, such as the size, expiration time, or size of the
login context buffer. Please see the mod_auth_dce.c file for details of
these options. The defaults should be acceptable for most installations.

If you're using Solaris 2.5, Digital Unix 4.0, or IBM AIX 4.x, you do not
need to edit the Configure script, as the correct libraries are already
specified. If you're using a different OS or version, you need to edit the
Configure script and specify the correct libraries for your configuration.

Edit the Configuration file, if desired, to change the modules that will be
built into Apache. If you're using Apache-SSL, you'll also need to edit the
Configuration file to point to your SSL build directory. Copy
mod_auth_dce.c to your server build directory. If you're using AIX, also
copy the file afs_syscall.aix to your build directory. Run the Configure
script to generate a Makefile, and type make to compile the server. Copy
the resulting server binary to the appropriate location, and you have
completed the installation process.


Configuration Directives and Notes
----------------------------------

NOTE: The default behavior of mod_auth_dce has *changed* as of version
      1.2. If you are upgrading from a version older than 1.2, be sure to
      change your current configuration if you wish to maintain the
      previous behavior.


AuthDCE - This directive should appear in a Directory block and takes
          either "On" or "Off" as an argument. It defaults to "Off".
          Setting it to "On" will enable DCE authentication within 
          the directory specified.

          You will also need valid AuthType, AuthName, and require
          directives in the Directory block. Currently, the only supported
          AuthType is "Basic". List the authorized users/groups for this
          directory in the require directive, or see below for correct
          require configuration if AuthDFS is enabled.


AuthDFS - This directive should appear in a Directory block and takes
          either "On" or "Off" as an argument. It defaults to "Off".
          Setting it to "On" will enable DFS ACL checking within
          the directory specified. When AuthDFS is on, mod_auth_dce
          will only request authentication if the request is for a file
          not readable by the server. If the server is running with no DCE
          credentials, server readability is controlled by the "any_other"
          entry on the DFS ACL. Otherwise, it is controlled by the entries
          that apply to the DCE identity of the server.

          When AuthDFS is enabled, your require directive should be set to
          "valid-user".


DCEIncludePW - This directive should appear in a Directory block and takes
               either "On" or "Off" as an argument. It defaults to "Off".
               Setting it to "On" will enable passing the browser's
               password to CGI programs via the environment variable
               DCEPW. Only enable this directive on web servers that do not
               allow interactive logins. Otherwise, users could use the ps
               command to potentially acquire plaintext passwords.


DCEDirectoryIndex - This directive should appear right next to your current
                    DirectoryIndex directive, with the same list of valid
                    index files. If not specified, DCEDirectoryIndex will
                    default to the same list of index files as
                    DirectoryIndex does when not specified.

                    mod_auth_dce needs this information to correctly serve
                    server readable index files in non-server readable
                    directories when AuthDFS is enabled. Unfortunately, the
                    list already specified with DirectoryIndex is not
                    available to mod_auth_dce, necessitating this seemingly
                    reduntant directive.


Checking for .htaccess files will only work if the .htaccess file is world
readable, and all directories in its path are world searchable. It is
recommended that .htaccess files be disabled, as they have not been tested
thoroughly.

Previous versions of the documentation recommended not checking for
symlinks. However, if your web server publishes user files, a user can
potentially use symlinks to read other users DCE credential files.
Therefore, the current recommendation is either to disable symlinks,
or to only allow symlinks if the owner matches.


Sample Configuration
--------------------

     <Directory /path/to/private>
       AuthType Basic
       AuthName Secret Files
       AuthDCE  On
       require  user  fred joe frank
       require  group staff
     </Directory>


This configuration protects all files located under the /path/to/private
directory. Only the listed DCE users or members of the listed DCE groups
are allowed to access these files.


Sample AuthDFS Configuration
----------------------------

     <Directory /dfs>
       AuthType Basic
       AuthName Cal Poly Pomona Intranet
       AuthDCE  On
       AuthDFS  On
       require  valid-user
     </Directory>


This configuration protects all files located under the /dfs directory.
DFS ACLs are used for authorization. Authentication is only requested when
a file is not readable by the server user.


DCE Authenticated CGIs
----------------------

If you use DCE authentication for your cgi-bin directory, you can not only
restrict access to them, but when they run, they also have full DCE
credentials of the browsing user. This feature can be used to create easy
to use remote DCE administration CGIs. For an example of the potential of
this feature, please see

     http://www.csupomona.edu/intranet/services/


The identity of the browser is available to the CGI via the standard
REMOTE_USER environment variable. If DCEIncludePW is set, then the
browser's DCE password is also available to the CGI via the DCEPW
environment variable. Do not set DCEIncludePW on a web server that also
allows user logins, or the ps command could potentially be used to
compromise passwords.

You shouldn't allow untrusted users to place CGIs in a DCE authenticated
location, as they could then have their CGI run with a browser's
credentials.


Feedback/Availability
---------------------

Please report any bugs or feature requests to <henson@acm.org>.


The latest version of mod_auth_dce is currently available at

http://www.intranet.csupomona.edu/~henson/www/projects/mod_auth_dce/

